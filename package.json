{
  "name": "influencerplatform",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "node scripts/dev-with-port.js",
    "dev:local": "NODE_ENV=development next dev -p 3002",
    "dev:wt2": "LOCAL_PORT=3002 node scripts/dev-with-port.js",
    "build": "next build",
    "start": "NODE_ENV=development next dev",
    "start:prod": "next start",
    "lint": "next lint",
    "logs:onboarding": "tail -f onboarding-logs",
    "db:generate": "drizzle-kit generate",
    "db:migrate": "drizzle-kit migrate",
    "db:push": "npm run db:generate && npm run db:migrate",
    "db:studio": "drizzle-kit studio",
    "db:studio:local": "NODE_ENV=development drizzle-kit studio",
    "db:local:up": "docker-compose up -d",
    "db:local:down": "docker-compose down",
    "db:local:reset": "docker-compose down -v && docker-compose up -d",
    "db:local:setup": "./scripts/setup-local-db.sh",
    "db:local:test": "node scripts/test-local-db.js",
    "db:reset:schema": "tsx scripts/reset-database-schema.ts",
    "db:seed:plans": "node scripts/seed-subscription-plans.js",
    "drop": "drizzle-kit drop",
    "test:tiktok-similar": "node run-tiktok-test.js",
    "test:tiktok-similar-api": "node test-tiktok-similar.js",
    "reset-user": "node scripts/reset-user-onboarding.js",
    "reset-user:simple": "node scripts/reset-user-simple.js",
    "reset-user:ts": "tsx scripts/reset-user-onboarding.ts",
    "upgrade-to-fame-flex": "DATABASE_URL=\"postgresql://postgres.cufwvosytcmaggyyfsix:DKVCh52QAgEMzGHT@aws-1-ap-south-1.pooler.supabase.com:6543/postgres\" npx tsx scripts/upgrade-user-to-fame-flex.ts",
    "find-user-id": "node scripts/find-user-id.js",
    "validate:deployment": "node scripts/validate-deployment.js",
    "validate:deployment:prod": "node scripts/validate-deployment.js --environment production",
    "validate:deployment:staging": "node scripts/validate-deployment.js --environment staging",
    "health:check": "curl -f http://localhost:3000/api/health || exit 1",
    "health:check:detailed": "curl -f http://localhost:3000/api/health?detailed=true&metadata=true || exit 1",
    "config:init:logging": "node scripts/init-logging-config.js",
    "config:init:monitoring": "node -e \"require('./lib/config/monitoring-config').initializeMonitoringDefaults().then(() => console.log('Monitoring defaults initialized')).catch(console.error)\"",
    "config:validate:all": "npm run config:validate:logging && npm run config:validate:monitoring",
    "config:validate:logging": "node -e \"require('./lib/config/logging-config').validateLoggingConfig().then(r => console.log(r.valid ? 'Logging config valid' : 'Logging config invalid:', r.errors)).catch(console.error)\"",
    "config:validate:monitoring": "node -e \"require('./lib/config/monitoring-config').validateMonitoringConfig().then(r => console.log(r.valid ? 'Monitoring config valid' : 'Monitoring config invalid:', r.errors)).catch(console.error)\"",
    "sentry:test": "node -e \"const Sentry = require('@sentry/nextjs'); Sentry.captureMessage('Test message from deployment script'); console.log('Test message sent to Sentry');\"",
    "report:validation": "curl -f http://localhost:3000/api/validate-deployment?format=report > deployment-validation-report.md && echo 'Report saved to deployment-validation-report.md'",
    "pre:deploy": "npm run config:validate:all && npm run validate:deployment",
    "post:deploy": "npm run health:check:detailed && npm run validate:deployment",
    "test:logging": "node scripts/test-logging-system.js",
    "test:logging:quick": "node scripts/test-logging-system.js --quick",
    "test:console-reduction": "node -e \"console.log('Testing console reduction...'); const { logger } = require('./lib/logging'); logger.info('New structured log'); logger.debug('Debug log (filtered in prod)'); console.log('Test complete');\"",
    "test:sentry-integration": "node -e \"const { logger } = require('./lib/logging'); logger.error('Test Sentry integration', new Error('Test error')); console.log('Sentry test sent');\"",
    "test:performance": "node -e \"const { logger } = require('./lib/logging'); const start = Date.now(); for(let i=0; i<1000; i++) logger.debug('perf test', {i}); console.log('1000 filtered logs took:', Date.now()-start, 'ms');\"",
    "test:search:instagram:keyword": "tsx test-scripts/search/keyword/instagram-enhanced.test.ts",
    "test:search:tiktok:keyword": "tsx test-scripts/search/keyword/tiktok-keyword.test.ts",
    "test:search:youtube:keyword": "tsx test-scripts/search/keyword/youtube-keyword.test.ts",
    "test:search:instagram:similar": "tsx test-scripts/search/similar/instagram-similar.test.ts",
    "test:search:tiktok:similar": "tsx test-scripts/search/similar/tiktok-similar.test.ts",
    "test:search:youtube:similar": "tsx test-scripts/search/similar/youtube-similar.test.ts",
    "test:modash:instagram:search": "tsx test-scripts/modash/instagram-search.test.ts",
    "test:modash:instagram:report": "tsx test-scripts/modash/instagram-report.test.ts",
    "test:legacy:tiktok:keyword": "tsx test-scripts/legacy/tiktok-keyword-old.test.ts",
    "test:legacy:instagram:similar": "tsx test-scripts/legacy/instagram-similar-old.test.ts",
    "compare:search": "tsx test-scripts/compare-search-results.ts"
  },
  "dependencies": {
    "@clerk/nextjs": "^6.23.3",
    "@dnd-kit/core": "^6.3.1",
    "@dnd-kit/sortable": "^10.0.0",
    "@dnd-kit/utilities": "^3.2.1",
    "@radix-ui/react-avatar": "^1.1.3",
    "@radix-ui/react-checkbox": "^1.1.4",
    "@radix-ui/react-label": "^2.1.2",
    "@radix-ui/react-progress": "^1.1.2",
    "@radix-ui/react-select": "^2.1.6",
    "@radix-ui/react-separator": "^1.1.2",
    "@radix-ui/react-slider": "^1.2.3",
    "@radix-ui/react-slot": "^1.1.2",
    "@radix-ui/react-tabs": "^1.1.13",
    "@react-email/components": "^0.0.38",
    "@sentry/nextjs": "^8.38.0",
    "@stripe/react-stripe-js": "^3.7.0",
    "@stripe/stripe-js": "^7.4.0",
    "@supabase/ssr": "^0.5.2",
    "@supabase/supabase-js": "^2.49.1",
    "@upstash/qstash": "^2.7.22",
    "@vercel/blob": "^1.1.1",
    "apify-client": "^2.12.0",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "dotenv": "^16.4.7",
    "drizzle-orm": "^0.39.3",
    "framer-motion": "^12.7.4",
    "heic-convert": "^2.1.0",
    "lucide-react": "^0.475.0",
    "next": "15.2.3",
    "openai": "5.20.1",
    "pg": "^8.16.3",
    "plyr-react": "^5.3.0",
    "postgres": "^3.4.5",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-email": "^4.0.6",
    "react-hot-toast": "^2.5.2",
    "resend": "^4.5.1",
    "sharp": "^0.33.2",
    "stripe": "^18.3.0",
    "svix": "^1.69.0",
    "swr": "^2.3.4",
    "tailwind-merge": "^3.0.1",
    "tailwindcss-animate": "^1.0.7",
    "typescript": "^5.7.3"
  },
  "devDependencies": {
    "@clerk/clerk-sdk-node": "^4.13.23",
    "@eslint/eslintrc": "^3",
    "@types/node": "^22.13.9",
    "@types/react": "^19.0.10",
    "@types/react-dom": "^19.0.4",
    "@typescript-eslint/eslint-plugin": "^8.26.0",
    "@typescript-eslint/parser": "^8.26.0",
    "drizzle-kit": "^0.31.4",
    "eslint": "^9",
    "eslint-config-next": "15.2.3",
    "node-fetch": "^3.3.2",
    "postcss": "^8",
    "tailwindcss": "^3.4.1",
    "tsx": "^4.20.6"
  }
}
