# Documentación de Errores y Soluciones en la Integración de Similar Search

## 1. Errores Iniciales de Tipos

### Error: Definiciones duplicadas de interfaces
- **Problema**: Interfaces `Campaign`, `ScrapingJob`, y `ScrapingResult` definidas en múltiples lugares.
- **Solución**: Consolidación de interfaces en `/app/types/campaign.ts`.

### Error: Incompatibilidad de tipos en resultados
- **Problema**: Diferentes estructuras de datos para similar y keyword search.
- **Solución**: Unificación usando `PlatformResult` con campo `data` genérico.

## 2. Loops y Ciclos Infinitos

### Loop #1: Polling infinito en search-results.jsx
- **Problema**: El componente seguía haciendo polling sin límite de tiempo.
- **Solución**: 
  - Implementación de MAX_POLLING_TIME (5 minutos)
  - Cleanup function para limpiar timeouts
  - Mejor manejo de estados de error

### Loop #2: Acceso a datos undefined
- **Problema**: Error "Cannot read properties of undefined (reading 'slice')"
- **Solución**: 
  - Inicialización de estado creators como array vacío
  - Validaciones de null/undefined
  - Manejo seguro de propiedades opcionales

## 3. Errores de Estructura de Datos

### Error: Resultados inválidos en base de datos
- **Problema**: La estructura guardada no coincidía con la esperada
- **Solución en progreso**: 
  - Mejor logging de datos en cada paso
  - Validación de estructura antes de guardar
  - Parsing flexible de resultados

### Error: Acceso incorrecto a creators
- **Problema**: Intentando acceder directamente a creators sin considerar PlatformResult
- **Solución**: 
  - Validación de estructura de datos
  - Acceso a través de .data cuando es necesario
  - Manejo de múltiples formatos de respuesta

## 4. Errores de API

### Error: Column does not exist
- **Problema**: "Error: column campaigns_scrapingJobs_results.platform does not exist"
- **Solución**: 
  - Corrección de consultas SQL
  - Especificación correcta de columnas en select
  - Validación de schema

## 5. Estado Actual y Próximos Pasos

### Implementado:
- Estructura de tipos unificada
- Manejo de timeouts en polling
- Validación de datos mejorada
- Logging extensivo para debugging

### Pendiente:
- Verificar estructura de datos en DB
- Mejorar manejo de errores en frontend
- Implementar recuperación de datos fallidos
- Optimizar tiempos de respuesta

## 6. Mejores Prácticas Identificadas

1. Siempre validar estructura de datos antes de guardar
2. Implementar timeouts en operaciones asíncronas
3. Mantener logging detallado en producción
4. Usar tipos consistentes en toda la aplicación
5. Manejar casos edge en frontend y backend

## 7. Recomendaciones para Futuras Integraciones

1. Definir interfaces/tipos antes de implementar
2. Implementar pruebas unitarias para validar estructuras
3. Mantener un sistema de logging consistente
4. Documentar cambios en schema de base de datos
5. Implementar circuit breakers para operaciones costosas

# Guía de Integración de Bots de Apify y Solución de Errores Comunes

## 1. Estructura de Datos y Tipos

### 1.1 Estructura Esperada de PlatformResult
```typescript
interface PlatformResult<T> {
  data: T[];
  platform: string;
  timestamp: Date;
  status: 'completed' | 'error' | 'processing';
}
```

### 1.2 Errores Comunes de Estructura
- **Error**: Los datos del bot no se guardan en la base de datos aunque aparecen en la consola
- **Causa**: Desajuste entre la estructura que devuelve el bot y PlatformResult
- **Solución**: 
  ```typescript
  // Transformar los datos del bot antes de guardar
  const transformBotResults = (botData) => {
    return {
      data: botData.map(item => ({
        ...item,
        platform: item.platform || 'instagram' // Valor por defecto
      })),
      platform: 'instagram',
      timestamp: new Date(),
      status: 'completed'
    };
  };
  ```

## 2. Proceso de Integración de Nuevos Bots

### 2.1 Pasos a Seguir
1. Verificar la estructura de datos que devuelve el bot
2. Implementar la transformación de datos
3. Validar que los campos requeridos estén presentes
4. Probar la inserción en la base de datos

### 2.2 Ejemplo de Implementación
```typescript
// 1. Definir la interfaz para los datos del bot
interface BotCreator {
  username: string;
  profile_pic_url?: string;
  platform: string;
  // ... otros campos
}

// 2. Implementar la transformación
const processBotResults = async (botData: BotCreator[]) => {
  const platformResult: PlatformResult<BotCreator> = {
    data: botData,
    platform: 'instagram',
    timestamp: new Date(),
    status: 'completed'
  };

  // 3. Validar datos
  if (!platformResult.data || !Array.isArray(platformResult.data)) {
    throw new Error('Invalid bot data structure');
  }

  // 4. Guardar en la base de datos
  return await db.insert(creators).values(platformResult);
};
```

## 3. Problemas Comunes y Soluciones

### 3.1 Error: Datos No Aparecen en la Base de Datos
- **Síntoma**: Los datos se ven en console.log pero no se guardan
- **Verificación**:
  ```typescript
  // Agregar logs en puntos clave
  console.log('Datos del bot:', botData);
  console.log('Datos transformados:', platformResult);
  console.log('Respuesta de la DB:', dbResponse);
  ```

### 3.2 Error: Campos Faltantes
- **Síntoma**: Error "column does not exist"
- **Solución**: 
  ```typescript
  // Asegurar que todos los campos requeridos estén presentes
  const validateCreator = (creator: BotCreator) => {
    const requiredFields = ['username', 'platform'];
    for (const field of requiredFields) {
      if (!creator[field]) {
        throw new Error(`Missing required field: ${field}`);
      }
    }
  };
  ```

## 4. Mejores Prácticas

### 4.1 Validación de Datos
- Implementar validación en cada paso del proceso
- Usar TypeScript para detectar errores de tipos temprano
- Mantener logs detallados en producción

### 4.2 Manejo de Errores
```typescript
try {
  const botData = await apifyClient.run();
  const validatedData = validateBotData(botData);
  const transformedData = transformBotResults(validatedData);
  await saveToDatabase(transformedData);
} catch (error) {
  console.error('Error en el proceso:', error);
  // Implementar recuperación o notificación
}
```

## 5. Lista de Verificación para Nuevos Bots

1. [ ] Verificar estructura de datos del bot
2. [ ] Implementar transformación a PlatformResult
3. [ ] Validar campos requeridos
4. [ ] Probar inserción en base de datos
5. [ ] Implementar manejo de errores
6. [ ] Agregar logs en puntos clave
7. [ ] Documentar particularidades del bot

## 6. Notas Adicionales

- Mantener consistencia en el nombramiento de campos
- Documentar cualquier transformación especial de datos
- Implementar timeouts adecuados para las llamadas al bot
- Considerar límites de rate y cuotas de la API
- Mantener un registro de errores conocidos y soluciones
